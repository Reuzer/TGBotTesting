import json
import logging
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
import asyncio
import os

API_TOKEN = '7697724690:AAGafP4hFJIVL9QJIHpwnsO3t9YHXaABJJ0'

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

USERS_DB = "data/users.json"
MAP_PATH = "data/map.jpg"

def load_users():
    try:
        with open(USERS_DB, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return []

def save_users(users):
    with open(USERS_DB, "w", encoding="utf-8") as f:
        json.dump(users, f, indent=2, ensure_ascii=False)

def get_user(uid):
    for u in load_users():
        if u["user_id"] == uid:
            return u
    return None

def register_user(uid, group_id, role):
    users = load_users()
    for u in users:
        if u["user_id"] == uid:
            u["role"] = role
            u["group_id"] = group_id
            save_users(users)
            return
    users.append({"user_id": uid, "group_id": group_id, "role": role})
    save_users(users)

class InputState(StatesGroup):
    links = State()
    teachers = State()
    starosta = State()
    map = State()
    register_group = State()

@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user = get_user(message.from_user.id)

    if user:
        if "role" in user and user["role"] in ["student", "leader"]:
            await send_main_menu(message, user["role"])
            return
        else:
            group = user["group_id"]
            kb = InlineKeyboardBuilder()
            kb.button(text="–Ø —Å—Ç—É–¥–µ–Ω—Ç", callback_data=f"role_student_{group}")
            kb.button(text="–Ø —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", callback_data=f"role_leader_{group}")
            await message.answer("–í—ã —É–∂–µ —É–∫–∞–∑–∞–ª–∏ –≥—Ä—É–ø–ø—É.\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=kb.as_markup())
            return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–°-301):")
    await state.set_state(InputState.register_group)

@dp.message(InputState.register_group)
async def register_group_handler(message: Message, state: FSMContext):
    group = message.text.strip()
    await state.update_data(group_id=group)
    kb = InlineKeyboardBuilder()
    kb.button(text="–Ø —Å—Ç—É–¥–µ–Ω—Ç", callback_data=f"role_student_{group}")
    kb.button(text="–Ø —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", callback_data=f"role_leader_{group}")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=kb.as_markup())
    await state.clear()

@dp.callback_query(F.data.startswith("role_"))
async def role_callback(callback: CallbackQuery):
    role, group_id = callback.data.split("_")[1], callback.data.split("_")[2]
    register_user(callback.from_user.id, group_id, role)
    group_file = f"data/{group_id}.json"
    if not os.path.exists(group_file):
        with open(group_file, "w", encoding="utf-8") as f:
            json.dump({}, f, ensure_ascii=False, indent=2)
    await send_main_menu(callback.message, role)

async def send_main_menu(message: Message, role: str):
    kb = InlineKeyboardBuilder()
    kb.button(text="üìé –°—Å—ã–ª–∫–∏", callback_data="get_links")
    kb.button(text="üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", callback_data="get_teachers")
    kb.button(text="üë§ –°—Ç–∞—Ä–æ—Å—Ç–∞", callback_data="get_starosta")
    kb.button(text="üìç –°—Ö–µ–º–∞", callback_data="get_map")

    if role == "leader":
        kb.button(text="‚ûï –ó–∞–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫–∏", callback_data="input_links")
        kb.button(text="‚ûï –ó–∞–º–µ–Ω–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", callback_data="input_teachers")
        kb.button(text="‚ûï –ó–∞–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä–æ—Å—Ç—É", callback_data="input_starosta")
        kb.button(text="üñºÔ∏è –ó–∞–º–µ–Ω–∏—Ç—å —Å—Ö–µ–º—É", callback_data="input_map")

    kb.adjust(1)  # <=== –í–ê–ñ–ù–û: –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.as_markup())


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ---

@dp.callback_query(F.data == "get_links")
async def show_links(callback: CallbackQuery):
    user = get_user(callback.from_user.id)
    group_data = load_group_data(user["group_id"])
    links = group_data.get("links", "–°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    await callback.message.answer(f"üìé –°—Å—ã–ª–∫–∏:\n{links}")

@dp.callback_query(F.data == "get_teachers")
async def show_teachers(callback: CallbackQuery):
    user = get_user(callback.from_user.id)
    group_data = load_group_data(user["group_id"])
    teachers = group_data.get("teachers", "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã.")
    await callback.message.answer(f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:\n{teachers}")

@dp.callback_query(F.data == "get_starosta")
async def show_starosta(callback: CallbackQuery):
    user = get_user(callback.from_user.id)
    group_data = load_group_data(user["group_id"])
    starosta = group_data.get("starosta", "–°—Ç–∞—Ä–æ—Å—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω.")
    await callback.message.answer(f"üë§ –°—Ç–∞—Ä–æ—Å—Ç–∞:\n{starosta}")

@dp.callback_query(F.data == "get_map")
async def show_map(callback: CallbackQuery):
    if os.path.exists(MAP_PATH):
        await callback.message.answer_photo(FSInputFile(MAP_PATH))
    else:
        await callback.message.answer("–°—Ö–µ–º–∞ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

# --- –í–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å—É–ø–µ—Ä—é–∑–µ—Ä–æ–º ---

@dp.callback_query(F.data == "input_links")
async def ask_links(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ (–æ–Ω–∏ –∑–∞–º–µ–Ω—è—Ç —Å—Ç–∞—Ä—ã–µ):")
    await state.set_state(InputState.links)

@dp.message(InputState.links)
async def save_links(message: Message, state: FSMContext):
    user = get_user(message.from_user.id)
    update_group_field(user["group_id"], "links", message.text)
    await message.answer("–°—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    await state.clear()

@dp.callback_query(F.data == "input_teachers")
async def ask_teachers(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (–æ–Ω–∏ –∑–∞–º–µ–Ω—è—Ç —Å—Ç–∞—Ä—ã—Ö):")
    await state.set_state(InputState.teachers)

@dp.message(InputState.teachers)
async def save_teachers(message: Message, state: FSMContext):
    user = get_user(message.from_user.id)
    update_group_field(user["group_id"], "teachers", message.text)
    await message.answer("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    await state.clear()

@dp.callback_query(F.data == "input_starosta")
async def ask_starosta(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ä–æ—Å—Ç–µ:")
    await state.set_state(InputState.starosta)

@dp.message(InputState.starosta)
async def save_starosta(message: Message, state: FSMContext):
    user = get_user(message.from_user.id)
    update_group_field(user["group_id"], "starosta", message.text)
    await message.answer("–°—Ç–∞—Ä–æ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    await state.clear()

@dp.callback_query(F.data == "input_map")
async def ask_map(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ö–µ–º—ã (JPG/PNG). –ü—Ä–µ–¥—ã–¥—É—â–∞—è –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞.")
    await state.set_state(InputState.map)

@dp.message(InputState.map, F.photo)
async def save_map(message: Message, state: FSMContext):
    photo = message.photo[-1]
    await photo.download(destination=MAP_PATH)
    await message.answer("–°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
    await state.clear()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def load_group_data(group_id):
    path = f"data/{group_id}.json"
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def update_group_field(group_id, field, value):
    path = f"data/{group_id}.json"
    data = load_group_data(group_id)
    data[field] = value
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# --- –ó–∞–ø—É—Å–∫ ---

async def main():
    logging.basicConfig(level=logging.INFO)
    os.makedirs("data", exist_ok=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
